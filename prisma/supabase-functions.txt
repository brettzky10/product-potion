//Product Search

CREATE
OR REPLACE FUNCTION product_search (
  query_embedding vector (1536),
  similarity_threshold FLOAT,
  match_count INT,
  store_id TEXT
) RETURNS TABLE (
  id TEXT,
  name TEXT,
  description TEXT,
  priceInCents INT,
  imagePath TEXT,
  similarity FLOAT
) LANGUAGE plpgsql AS $$
BEGIN
  RETURN QUERY
  SELECT
    product.id,
    product.name,
    product.description,
    product."priceInCents",
    product."imagePath",
    1 - (product.embedding <=> query_embedding) AS similarity
  FROM product
  WHERE 
    product."storeId" = store_id AND
    1 - (product.embedding <=> query_embedding) > similarity_threshold
  ORDER BY product.embedding <=> query_embedding
  LIMIT match_count;
END;
$$;

//Drop Product Search
DROP FUNCTION product_search(vector,double precision,integer,text)


//Create User on signup
create trigger create_user_on_signup
after insert on auth.users for each row
execute function create_user_on_signup ();


//Drop Create User on signup
drop trigger create_user_on_signup on auth.users;

//trigger
begin

  insert into public.owner(id, email)
  values(
    new.id,
    new.raw_user_meta_data ->> 'email'
  );
  return new;


end;



//***Make sure you specify: Definer


//**SupaHook - supabase trigger to send webhook when a product is changed

CREATE OR REPLACE TRIGGER "product-updates" AFTER INSERT OR DELETE OR UPDATE ON "public"."products" FOR EACH ROW EXECUTE FUNCTION "supabase_functions"."http_request"('{{HOOKDECK_PRODUCT_UPDATE_WEBHOOK_URL}}', 'POST', '{"Content-type":"application/json","x-supabase-api-key":"{{HOOKDECK_PRODUCT_UPDATE_WEBHOOK_KEY}}"}', '{}', '1000');