generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model owner {
  id                String     @id @default(uuid())
  email             String?     @unique
  name              String?
  userId            String
  customerId       String? @unique
  connectedAccountId    String?  @unique
  stripeConnectedLinked Boolean @default(false)
  isPrintfulLinked Boolean @default(false)
  linkCode         String?
  affiliate         affiliate?
  subscription      billings? @relation("OwnerToBilling")
  stores            store[]
  orders            order[]


  createdAt        DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model billings {
  id              String @id @default(uuid())
  amount          Int @default(10)
  plan            plans   @default(STANDARD)
  owner           owner?   @relation("OwnerToBilling", fields: [ownerId], references: [id])
  ownerId         String @unique
  userId          String @unique
  startDate       DateTime  @default(now())
  endDate         DateTime?
  period          period?
  subscribed      Boolean @default(false)
  daysWithService Int     @default(0)

  created         String?
  current_period_end String?
  current_period_start String?
  ended_at        String?
  metadata        Json?
  cancel_at       String?
  cancel_at_period_end String?
  canceled_at     String?

  status          status?
  trial_end       String?
  trial_start     String?

  payment_method_id String?
  card_brand      String?
  card_last4      String?
}


enum status {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
}

enum plans {
  STANDARD
  PRO
  ULTIMATE
}

enum pricingInterval {
  day
  week
  month
}

enum pricingType {
  one_time
  recurring
}

enum period {
 monthly
 yearly
}


model store {
  id                  String    @id @default(uuid())
  name                String
  icon                String?
  category            String?   @default("fitness")
  owner               owner     @relation( fields: [ownerId], references: [id])
  ownerId             String
  userId              String
  subdomain           String    @unique
  //domain            String?
  products            product[]
  orders              order[]
  discounts           discount[]
  categories          category[] @relation("StoreToCategory")
  sizes               size[] @relation("StoreToSize")
  colors              color[] @relation("StoreToColor")

  pin                 Int @default(1234)
  wake                Boolean @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model product {
  id          String @id @default(uuid())
  name          String
  priceInCents  Int
  quantity      Int  @default(1)
  imagePath     String
  description String @default("")
  isAvailableForPurchase     Boolean @default(true)
  discountCodes discount[]
  category    String  @default("fitness")
  orderItems  orderItem[]
  customCategory    category? @relation("CategoryToproduct", fields: [categoryId], references: [id])
  categoryId  String?
  sizeId      String?
  size        size? @relation(fields: [sizeId], references: [id])
  colorId     String?
  color       color? @relation(fields: [colorId], references: [id])

  storeId     String
  store       store @relation(fields: [storeId], references: [id])
  embedding   Unsupported("vector(1536)")? //https://github.com/prisma/prisma/discussions/18220
  tokens      Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model discount {
  id             String           @id @default(uuid())
  code           String           @unique
  discountAmount Int
  discountType   discountCodeType
  uses           Int              @default(0)
  isActive       Boolean          @default(true)
  allProducts    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  limit          Int?
  expiresAt      DateTime?
  storeId        String
  store          store            @relation(fields: [storeId], references: [id])
  products       product[]
  orders          order[]
}

enum discountCodeType {
  PERCENTAGE
  FIXED
}

model order{
  id String @id @default(uuid())
  storeId String
  store store @relation(fields: [storeId], references: [id])
  owner  owner     @relation(fields: [ownerId], references: [id])
  ownerId   String
  orderItems orderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  discountCodeId String?
  discountCode   discount? @relation(fields: [discountCodeId], references: [id], onDelete: Restrict)

  @@index([storeId])
}


model orderItem {
  id String @id @default(uuid())
  orderId String
  order order @relation(fields: [orderId], references: [id])
  productId String
  product product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}



model category {
  id String @id @default(uuid())
  storeId String
  store store @relation("StoreToCategory", fields: [storeId], references: [id])
  // billboardId String
  // billboard billboard @relation(fields: [billboardId], references: [id])
  products product[] @relation("CategoryToproduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  //@@index([billboardId])
}

model size{
  id String @id @default(uuid())
  storeId String
  store store @relation("StoreToSize", fields: [storeId], references: [id])
  name String
  value String
  products product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model color{
  id String @id @default(uuid())
  storeId String
  store store @relation("StoreToColor", fields: [storeId], references: [id])
  name String
  value String
  products product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model affiliate {
  id        String   @id @default(uuid())
  owner     owner?   @relation(fields: [ownerId], references: [id])
  ownerId   String?  @unique
  createdAt DateTime @default(now())
}